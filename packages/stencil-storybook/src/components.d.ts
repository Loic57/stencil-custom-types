/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonColors } from "./interfaces";
export { ButtonColors } from "./interfaces";
export namespace Components {
    interface ApButton {
        "color": ButtonColors;
        "content": string;
        "disabled"?: boolean;
        "icon"?: string;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "outlined"?: boolean;
        "size"?: string;
        "text"?: boolean;
        "type"?: string;
    }
}
export interface ApButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApButtonElement;
}
declare global {
    interface HTMLApButtonElementEventMap {
        "clickedButton": any;
    }
    interface HTMLApButtonElement extends Components.ApButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApButtonElementEventMap>(type: K, listener: (this: HTMLApButtonElement, ev: ApButtonCustomEvent<HTMLApButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApButtonElementEventMap>(type: K, listener: (this: HTMLApButtonElement, ev: ApButtonCustomEvent<HTMLApButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApButtonElement: {
        prototype: HTMLApButtonElement;
        new (): HTMLApButtonElement;
    };
    interface HTMLElementTagNameMap {
        "ap-button": HTMLApButtonElement;
    }
}
declare namespace LocalJSX {
    interface ApButton {
        "color"?: ButtonColors;
        "content"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "onClickedButton"?: (event: ApButtonCustomEvent<any>) => void;
        "outlined"?: boolean;
        "size"?: string;
        "text"?: boolean;
        "type"?: string;
    }
    interface IntrinsicElements {
        "ap-button": ApButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ap-button": LocalJSX.ApButton & JSXBase.HTMLAttributes<HTMLApButtonElement>;
        }
    }
}
